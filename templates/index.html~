<html>
    <head>
        <meta http-equiv="Content-type" content="text/html; charset=utf-8">
        <title>Vireo</title>

        <link rel="stylesheet" href="/static/css/bootstrap.css" type="text/css" media="screen" title="master" charset="utf-8">
        <link rel="stylesheet" href="/static/css/bootstrap-responsive.css" type="text/css" media="screen" title="master" charset="utf-8">
        <link rel="stylesheet" href="/static/style.css" type="text/css">

        <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
        <script type="text/javascript" src="/static/interactivity.js"></script>

        <script src="/static/jasmid/stream.js"></script>
        <script src="/static/jasmid/midifile.js"></script>
        <script src="/static/jasmid/replayer.js"></script>
        <script src="/static/jasmid/synth.js"></script>
        <script src="/static/jasmid/audio.js"></script>
        <script>
            function loadRemote(path, callback) {
                var fetch = new XMLHttpRequest();
                fetch.open('GET', path);
                fetch.overrideMimeType("text/plain; charset=x-user-defined");
                fetch.onreadystatechange = function() {
                    if(this.readyState == 4 && this.status == 200) {
                        /* munge response into a binary string */
                        var t = this.responseText || "" ;
                        var ff = [];
                        var mx = t.length;
                        var scc= String.fromCharCode;
                        for (var z = 0; z < mx; z++) {
                            ff[z] = scc(t.charCodeAt(z) & 255);
                        }
                        callback(ff.join(""));
                    }
                }
                fetch.send();
            }
            if (typeof String.prototype.trimLeft !== "function") {
                String.prototype.trimLeft = function() {
                    return this.replace(/^\s+/, "");
                };
            }
            if (typeof String.prototype.trimRight !== "function") {
                String.prototype.trimRight = function() {
                    return this.replace(/\s+$/, "");
                };
            }
            if (typeof Array.prototype.map !== "function") {
                Array.prototype.map = function(callback, thisArg) {
                    for (var i=0, n=this.length, a=[]; i<n; i++) {
                        if (i in this) a[i] = callback.call(thisArg, this[i]);
                    }
                    return a;
                };
            }
            function getCookies() {
                var c = document.cookie, v = 0, cookies = {};
                if (document.cookie.match(/^\s*\$Version=(?:"1"|1);\s*(.*)/)) {
                    c = RegExp.$1;
                    v = 1;
                }
                if (v === 0) {
                    c.split(/[,;]/).map(function(cookie) {
                        var parts = cookie.split(/=/, 2),
                        name = decodeURIComponent(parts[0].trimLeft()),
                        value = parts.length > 1 ? decodeURIComponent(parts[1].trimRight()) : null;
                        cookies[name] = value;
                    });
                    } else {
                    c.match(/(?:^|\s+)([!#$%&'*+\-.0-9A-Z^`a-z|~]+)=([!#$%&'*+\-.0-9A-Z^`a-z|~]*|"(?:[\x20-\x7E\x80\xFF]|\\[\x00-\x7F])*")(?=\s*[,;]|$)/g).map(function($0, $1) {
                        var name = $0,
                        value = $1.charAt(0) === '"'
                        ? $1.substr(1, -1).replace(/\\(.)/g, "$1")
                        : $1;
                        cookies[name] = value;
                    });
                }
                return cookies;
            }
            function getCookie(name) {
                return getCookies()[name];
            }

            function play(file) {
                loadRemote(file, function(data) {
                    midiFile = MidiFile(data);
                    synth = Synth(44100);
                    replayer = Replayer(midiFile, synth);
                    audio = AudioPlayer(replayer);
                })
            }

            function playFile() {
                play('/compose/' + document.getElementById('query').value);
                var tweetdisplay = document.getElementById('tweetDisplay')
                tweetdisplay.innerText = getCookie('tweet');
                document.getElementById('tweetDiv').setAttribute("hidden", "no");
            }

        </script>
    </head>

    <body bgcolor="black">
        {% block content %}
        <div class="container">
            <div id="mainDisplay" align="center" class="span12 custom-hero">
                <div class="row">
                    <div id="bird" class="span6">
                        <img src="/static/imgs/birdhat.png" id="birdhat" alt = "wtf"/>
                    </div>

                    <div id="formDiv" class="span6" align="center">
                        <img src="/static/imgs/logo.png" id="logo" alt = "wtf"/>
                        <br><br>
                        <input type="text" id="query" name="query" placeholder="Enter a Twitter search query, and I will compose music for you!"/>
                        <br><br>
                        <button class="btn" id="compose" onclick="playFile();">Compose</button>
                    </div>
                </div>
            </div>
        </div>
        <br>
        <div class="container">
            <div id="tweetDiv" class="custom-hero span12" hidden="yes">
                <h1 id = "tweetDisplay" />
            </div>
        </div>
        <br>

        <script src="/static/js/vendor/jquery-1.8.2.min.js" type="text/javascript"></script>
        <script src="/static/js/bootstrap/bootstrap.js" type="text/javascript"></script>
        <script type=text/javascript src="{{ url_for('static', filename='jquery.js') }}"></script>
        {% endblock %}
    </body>
</html>
